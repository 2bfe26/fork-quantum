// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Slider /> Snapshots should match the snapshot when <Slider /> is disabled 1`] = `
.c3 {
  background-color: #4c4c4c;
  border-color: #4c4c4c;
  border-radius: 4px;
  color: #FFFFFF;
  font-size: 16px;
  font-weight: bold;
  opacity: 0;
  padding: 4px 8px;
  position: absolute;
  text-align: center;
  -webkit-transition: opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;
  visibility: hidden;
  z-index: 100;
  top: -5px;
  left: 50%;
  margin-left: -0px;
}

.c3:before {
  content: '';
  position: absolute;
  border-left: 6px solid transparent;
  border-right: 6px solid transparent;
  left: 50%;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  border-top: 6px solid;
  border-top-color: inherit;
  bottom: -5px;
}

.c1 {
  cursor: default;
  position: relative;
  white-space: nowrap;
}

.c1 .c2 {
  width: initial;
}

.c4 .rc-slider-handle {
  background-color: #1355d0;
}

.c4 .rc-slider-rail {
  background-color: #e5edfc;
}

.c4 .rc-slider-track {
  background-color: rgba(19,85,208,0.5);
}

.c4 .rc-slider-handle:active,
.c4 .rc-slider-handle:focus {
  border: none;
  box-shadow: 0 2px 6px 0 rgba(19,85,208,0.5);
}

.c4.rc-slider-disabled {
  background: none;
}

.c4.rc-slider-disabled .rc-slider-handle {
  background-color: #999999;
}

.c4.rc-slider-disabled .rc-slider-rail {
  background-color: #f2f2f2;
}

.c4.rc-slider-disabled .rc-slider-track {
  background-color: #cccccc;
}

.c0 {
  width: 100%;
}

.c0 > div:first-child {
  top: -41px;
  left: 50%;
}

<Slider
  disabled={true}
  max={100}
  min={0}
  onChange={[Function]}
  tipFormatter={[Function]}
  value={50}
>
  <Slider__StyledTooltip
    disabled={true}
    max={100}
    min={0}
    onChange={[Function]}
    text="50"
    tipFormatter={[Function]}
    value={50}
    visible={null}
  >
    <StyledComponent
      disabled={true}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Slider__StyledTooltip-sc-1xvfbkj-2",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "width:100%;> div:first-child{top:-41px;left:",
              [Function],
              "%;}",
            ],
          },
          "displayName": "Slider__StyledTooltip",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Slider__StyledTooltip-sc-1xvfbkj-2",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      max={100}
      min={0}
      onChange={[Function]}
      text="50"
      tipFormatter={[Function]}
      value={50}
      visible={null}
    >
      <Tooltip
        className="c0"
        disabled={true}
        max={100}
        min={0}
        onChange={[Function]}
        placement="top"
        text="50"
        tipFormatter={[Function]}
        value={50}
        visible={null}
      >
        <Tooltip__Wrapper
          className="c0"
          disabled={true}
          length={2}
          max={100}
          min={0}
          onChange={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          tipFormatter={[Function]}
          value={50}
        >
          <StyledComponent
            className="c0"
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Tooltip__Wrapper-sc-1s2fcfh-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "cursor:default;position:relative;white-space:",
                    [Function],
                    ";",
                    ".c2",
                    "{width:",
                    [Function],
                    ";}",
                  ],
                },
                "displayName": "Tooltip__Wrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Tooltip__Wrapper-sc-1s2fcfh-1",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            length={2}
            max={100}
            min={0}
            onChange={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            tipFormatter={[Function]}
            value={50}
          >
            <div
              className="c0 c1"
              disabled={true}
              max={100}
              min={0}
              onChange={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              value={50}
            >
              <Tip
                height={0}
                placement="top"
                show={false}
                width={0}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "c2",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          "background-color:",
                          "#4c4c4c",
                          ";border-color:",
                          "#4c4c4c",
                          ";border-radius:4px;color:",
                          "#FFFFFF",
                          ";font-size:16px;font-weight:bold;opacity:",
                          [Function],
                          ";padding:4px 8px;position:absolute;text-align:center;transition:opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;visibility:",
                          [Function],
                          ";z-index:100;",
                          [Function],
                          " &:before{content:'';position:absolute;",
                          [Function],
                          ";}",
                        ],
                      },
                      "displayName": "Tip",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "c2",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  height={0}
                  placement="top"
                  show={false}
                  width={0}
                >
                  <div
                    className="c2 c3"
                    height={0}
                    width={0}
                  >
                    50
                  </div>
                </StyledComponent>
              </Tip>
              <rcSlider
                disabled={true}
                handleStyle={
                  Object {
                    "borderWidth": 0,
                    "height": 20,
                    "marginLeft": -9,
                    "marginTop": -6,
                    "width": 20,
                  }
                }
                max={100}
                min={0}
                onAfterChange={[Function]}
                onBeforeChange={[Function]}
                onChange={[Function]}
                railStyle={
                  Object {
                    "height": 8,
                  }
                }
                tipFormatter={[Function]}
                trackStyle={
                  Object {
                    "height": 8,
                  }
                }
                value={50}
              >
                <StyledComponent
                  disabled={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Handle": [Function],
                      "Range": [Function],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Slider__StyledSlider-sc-1xvfbkj-0",
                        "isStatic": true,
                        "lastClassName": "c4",
                        "rules": Array [
                          ".rc-slider-handle{background-color:",
                          "#1355d0",
                          ";}.rc-slider-rail{background-color:",
                          "#e5edfc",
                          ";}.rc-slider-track{background-color:",
                          "rgba(19, 85, 208, 0.5)",
                          ";}.rc-slider-handle:active,.rc-slider-handle:focus{border:none;box-shadow:0 2px 6px 0 ",
                          "rgba(19, 85, 208, 0.5)",
                          ";}&.rc-slider-disabled{background:none;.rc-slider-handle{background-color:",
                          "#999999",
                          ";}.rc-slider-rail{background-color:",
                          "#f2f2f2",
                          ";}.rc-slider-track{background-color:",
                          "#cccccc",
                          ";}}",
                        ],
                      },
                      "createSliderWithTooltip": [Function],
                      "displayName": "rcSlider",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Slider__StyledSlider-sc-1xvfbkj-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  handleStyle={
                    Object {
                      "borderWidth": 0,
                      "height": 20,
                      "marginLeft": -9,
                      "marginTop": -6,
                      "width": 20,
                    }
                  }
                  max={100}
                  min={0}
                  onAfterChange={[Function]}
                  onBeforeChange={[Function]}
                  onChange={[Function]}
                  railStyle={
                    Object {
                      "height": 8,
                    }
                  }
                  tipFormatter={[Function]}
                  trackStyle={
                    Object {
                      "height": 8,
                    }
                  }
                  value={50}
                >
                  <ComponentEnhancer(undefined)
                    activeDotStyle={Object {}}
                    className="c4"
                    disabled={true}
                    dotStyle={Object {}}
                    dots={false}
                    handle={[Function]}
                    handleStyle={
                      Object {
                        "borderWidth": 0,
                        "height": 20,
                        "marginLeft": -9,
                        "marginTop": -6,
                        "width": 20,
                      }
                    }
                    included={true}
                    marks={Object {}}
                    max={100}
                    min={0}
                    onAfterChange={[Function]}
                    onBeforeChange={[Function]}
                    onChange={[Function]}
                    prefixCls="rc-slider"
                    railStyle={
                      Object {
                        "height": 8,
                      }
                    }
                    step={1}
                    tipFormatter={[Function]}
                    trackStyle={
                      Object {
                        "height": 8,
                      }
                    }
                    value={50}
                    vertical={false}
                  >
                    <div
                      className="rc-slider rc-slider-disabled c4"
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      onMouseUp={[Function]}
                      onTouchStart={[Function]}
                    >
                      <div
                        className="rc-slider-rail"
                        style={
                          Object {
                            "height": 8,
                          }
                        }
                      />
                      <Track
                        className="rc-slider-track"
                        included={true}
                        length={50}
                        offset={0}
                        style={
                          Object {
                            "height": 8,
                          }
                        }
                        vertical={false}
                      >
                        <div
                          className="rc-slider-track"
                          style={
                            Object {
                              "height": 8,
                              "left": "0%",
                              "width": "50%",
                            }
                          }
                        />
                      </Track>
                      <Steps
                        activeDotStyle={Object {}}
                        dotStyle={Object {}}
                        dots={false}
                        included={true}
                        lowerBound={0}
                        marks={Object {}}
                        max={100}
                        min={0}
                        prefixCls="rc-slider"
                        step={1}
                        upperBound={50}
                        vertical={false}
                      >
                        <div
                          className="rc-slider-step"
                        />
                      </Steps>
                      <Handle
                        className="rc-slider-handle"
                        disabled={true}
                        key="0"
                        max={100}
                        min={0}
                        offset={50}
                        prefixCls="rc-slider"
                        style={
                          Object {
                            "borderWidth": 0,
                            "height": 20,
                            "marginLeft": -9,
                            "marginTop": -6,
                            "width": 20,
                          }
                        }
                        value={50}
                        vertical={false}
                      >
                        <div
                          aria-disabled={true}
                          aria-valuemax={100}
                          aria-valuemin={0}
                          aria-valuenow={50}
                          className="rc-slider-handle"
                          onBlur={[Function]}
                          onKeyDown={[Function]}
                          role="slider"
                          style={
                            Object {
                              "borderWidth": 0,
                              "height": 20,
                              "left": "50%",
                              "marginLeft": -9,
                              "marginTop": -6,
                              "width": 20,
                            }
                          }
                          tabIndex={null}
                        />
                      </Handle>
                      <Marks
                        className="rc-slider-mark"
                        included={true}
                        lowerBound={0}
                        marks={Object {}}
                        max={100}
                        min={0}
                        onClickLabel={[Function]}
                        upperBound={50}
                        vertical={false}
                      >
                        <div
                          className="rc-slider-mark"
                        />
                      </Marks>
                    </div>
                  </ComponentEnhancer(undefined)>
                </StyledComponent>
              </rcSlider>
            </div>
          </StyledComponent>
        </Tooltip__Wrapper>
      </Tooltip>
    </StyledComponent>
  </Slider__StyledTooltip>
</Slider>
`;

exports[`<Slider /> Snapshots should match the snapshot when have just one handle 1`] = `
.c3 {
  background-color: #4c4c4c;
  border-color: #4c4c4c;
  border-radius: 4px;
  color: #FFFFFF;
  font-size: 16px;
  font-weight: bold;
  opacity: 0;
  padding: 4px 8px;
  position: absolute;
  text-align: center;
  -webkit-transition: opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;
  visibility: hidden;
  z-index: 100;
  top: -5px;
  left: 50%;
  margin-left: -0px;
}

.c3:before {
  content: '';
  position: absolute;
  border-left: 6px solid transparent;
  border-right: 6px solid transparent;
  left: 50%;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  border-top: 6px solid;
  border-top-color: inherit;
  bottom: -5px;
}

.c1 {
  cursor: default;
  position: relative;
  white-space: nowrap;
}

.c1 .c2 {
  width: initial;
}

.c4 .rc-slider-handle {
  background-color: #1355d0;
}

.c4 .rc-slider-rail {
  background-color: #e5edfc;
}

.c4 .rc-slider-track {
  background-color: rgba(19,85,208,0.5);
}

.c4 .rc-slider-handle:active,
.c4 .rc-slider-handle:focus {
  border: none;
  box-shadow: 0 2px 6px 0 rgba(19,85,208,0.5);
}

.c4.rc-slider-disabled {
  background: none;
}

.c4.rc-slider-disabled .rc-slider-handle {
  background-color: #999999;
}

.c4.rc-slider-disabled .rc-slider-rail {
  background-color: #f2f2f2;
}

.c4.rc-slider-disabled .rc-slider-track {
  background-color: #cccccc;
}

.c0 {
  width: 100%;
}

.c0 > div:first-child {
  top: -41px;
  left: 10%;
}

<Slider
  max={100}
  min={0}
  onChange={[Function]}
  tipFormatter={[Function]}
  value={10}
>
  <Slider__StyledTooltip
    max={100}
    min={0}
    onChange={[Function]}
    text="10"
    tipFormatter={[Function]}
    value={10}
    visible={null}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Slider__StyledTooltip-sc-1xvfbkj-2",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "width:100%;> div:first-child{top:-41px;left:",
              [Function],
              "%;}",
            ],
          },
          "displayName": "Slider__StyledTooltip",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Slider__StyledTooltip-sc-1xvfbkj-2",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      max={100}
      min={0}
      onChange={[Function]}
      text="10"
      tipFormatter={[Function]}
      value={10}
      visible={null}
    >
      <Tooltip
        className="c0"
        max={100}
        min={0}
        onChange={[Function]}
        placement="top"
        text="10"
        tipFormatter={[Function]}
        value={10}
        visible={null}
      >
        <Tooltip__Wrapper
          className="c0"
          length={2}
          max={100}
          min={0}
          onChange={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          tipFormatter={[Function]}
          value={10}
        >
          <StyledComponent
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Tooltip__Wrapper-sc-1s2fcfh-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "cursor:default;position:relative;white-space:",
                    [Function],
                    ";",
                    ".c2",
                    "{width:",
                    [Function],
                    ";}",
                  ],
                },
                "displayName": "Tooltip__Wrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Tooltip__Wrapper-sc-1s2fcfh-1",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            length={2}
            max={100}
            min={0}
            onChange={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            tipFormatter={[Function]}
            value={10}
          >
            <div
              className="c0 c1"
              max={100}
              min={0}
              onChange={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              value={10}
            >
              <Tip
                height={0}
                placement="top"
                show={false}
                width={0}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "c2",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          "background-color:",
                          "#4c4c4c",
                          ";border-color:",
                          "#4c4c4c",
                          ";border-radius:4px;color:",
                          "#FFFFFF",
                          ";font-size:16px;font-weight:bold;opacity:",
                          [Function],
                          ";padding:4px 8px;position:absolute;text-align:center;transition:opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;visibility:",
                          [Function],
                          ";z-index:100;",
                          [Function],
                          " &:before{content:'';position:absolute;",
                          [Function],
                          ";}",
                        ],
                      },
                      "displayName": "Tip",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "c2",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  height={0}
                  placement="top"
                  show={false}
                  width={0}
                >
                  <div
                    className="c2 c3"
                    height={0}
                    width={0}
                  >
                    10
                  </div>
                </StyledComponent>
              </Tip>
              <rcSlider
                handleStyle={
                  Object {
                    "borderWidth": 0,
                    "height": 20,
                    "marginLeft": -9,
                    "marginTop": -6,
                    "width": 20,
                  }
                }
                max={100}
                min={0}
                onAfterChange={[Function]}
                onBeforeChange={[Function]}
                onChange={[Function]}
                railStyle={
                  Object {
                    "height": 8,
                  }
                }
                tipFormatter={[Function]}
                trackStyle={
                  Object {
                    "height": 8,
                  }
                }
                value={10}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Handle": [Function],
                      "Range": [Function],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Slider__StyledSlider-sc-1xvfbkj-0",
                        "isStatic": true,
                        "lastClassName": "c4",
                        "rules": Array [
                          ".rc-slider-handle{background-color:",
                          "#1355d0",
                          ";}.rc-slider-rail{background-color:",
                          "#e5edfc",
                          ";}.rc-slider-track{background-color:",
                          "rgba(19, 85, 208, 0.5)",
                          ";}.rc-slider-handle:active,.rc-slider-handle:focus{border:none;box-shadow:0 2px 6px 0 ",
                          "rgba(19, 85, 208, 0.5)",
                          ";}&.rc-slider-disabled{background:none;.rc-slider-handle{background-color:",
                          "#999999",
                          ";}.rc-slider-rail{background-color:",
                          "#f2f2f2",
                          ";}.rc-slider-track{background-color:",
                          "#cccccc",
                          ";}}",
                        ],
                      },
                      "createSliderWithTooltip": [Function],
                      "displayName": "rcSlider",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Slider__StyledSlider-sc-1xvfbkj-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  handleStyle={
                    Object {
                      "borderWidth": 0,
                      "height": 20,
                      "marginLeft": -9,
                      "marginTop": -6,
                      "width": 20,
                    }
                  }
                  max={100}
                  min={0}
                  onAfterChange={[Function]}
                  onBeforeChange={[Function]}
                  onChange={[Function]}
                  railStyle={
                    Object {
                      "height": 8,
                    }
                  }
                  tipFormatter={[Function]}
                  trackStyle={
                    Object {
                      "height": 8,
                    }
                  }
                  value={10}
                >
                  <ComponentEnhancer(undefined)
                    activeDotStyle={Object {}}
                    className="c4"
                    disabled={false}
                    dotStyle={Object {}}
                    dots={false}
                    handle={[Function]}
                    handleStyle={
                      Object {
                        "borderWidth": 0,
                        "height": 20,
                        "marginLeft": -9,
                        "marginTop": -6,
                        "width": 20,
                      }
                    }
                    included={true}
                    marks={Object {}}
                    max={100}
                    min={0}
                    onAfterChange={[Function]}
                    onBeforeChange={[Function]}
                    onChange={[Function]}
                    prefixCls="rc-slider"
                    railStyle={
                      Object {
                        "height": 8,
                      }
                    }
                    step={1}
                    tipFormatter={[Function]}
                    trackStyle={
                      Object {
                        "height": 8,
                      }
                    }
                    value={10}
                    vertical={false}
                  >
                    <div
                      className="rc-slider c4"
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      onMouseUp={[Function]}
                      onTouchStart={[Function]}
                    >
                      <div
                        className="rc-slider-rail"
                        style={
                          Object {
                            "height": 8,
                          }
                        }
                      />
                      <Track
                        className="rc-slider-track"
                        included={true}
                        length={10}
                        offset={0}
                        style={
                          Object {
                            "height": 8,
                          }
                        }
                        vertical={false}
                      >
                        <div
                          className="rc-slider-track"
                          style={
                            Object {
                              "height": 8,
                              "left": "0%",
                              "width": "10%",
                            }
                          }
                        />
                      </Track>
                      <Steps
                        activeDotStyle={Object {}}
                        dotStyle={Object {}}
                        dots={false}
                        included={true}
                        lowerBound={0}
                        marks={Object {}}
                        max={100}
                        min={0}
                        prefixCls="rc-slider"
                        step={1}
                        upperBound={10}
                        vertical={false}
                      >
                        <div
                          className="rc-slider-step"
                        />
                      </Steps>
                      <Handle
                        className="rc-slider-handle"
                        disabled={false}
                        key="0"
                        max={100}
                        min={0}
                        offset={10}
                        prefixCls="rc-slider"
                        style={
                          Object {
                            "borderWidth": 0,
                            "height": 20,
                            "marginLeft": -9,
                            "marginTop": -6,
                            "width": 20,
                          }
                        }
                        value={10}
                        vertical={false}
                      >
                        <div
                          aria-disabled={false}
                          aria-valuemax={100}
                          aria-valuemin={0}
                          aria-valuenow={10}
                          className="rc-slider-handle"
                          onBlur={[Function]}
                          onKeyDown={[Function]}
                          role="slider"
                          style={
                            Object {
                              "borderWidth": 0,
                              "height": 20,
                              "left": "10%",
                              "marginLeft": -9,
                              "marginTop": -6,
                              "width": 20,
                            }
                          }
                          tabIndex={0}
                        />
                      </Handle>
                      <Marks
                        className="rc-slider-mark"
                        included={true}
                        lowerBound={0}
                        marks={Object {}}
                        max={100}
                        min={0}
                        onClickLabel={[Function]}
                        upperBound={10}
                        vertical={false}
                      >
                        <div
                          className="rc-slider-mark"
                        />
                      </Marks>
                    </div>
                  </ComponentEnhancer(undefined)>
                </StyledComponent>
              </rcSlider>
            </div>
          </StyledComponent>
        </Tooltip__Wrapper>
      </Tooltip>
    </StyledComponent>
  </Slider__StyledTooltip>
</Slider>
`;

exports[`<Slider /> Snapshots should match the snapshot when have two handles 1`] = `
.c3 {
  background-color: #4c4c4c;
  border-color: #4c4c4c;
  border-radius: 4px;
  color: #FFFFFF;
  font-size: 16px;
  font-weight: bold;
  opacity: 0;
  padding: 4px 8px;
  position: absolute;
  text-align: center;
  -webkit-transition: opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;
  transition: opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;
  visibility: hidden;
  z-index: 100;
  top: -5px;
  left: 50%;
  margin-left: -0px;
}

.c3:before {
  content: '';
  position: absolute;
  border-left: 6px solid transparent;
  border-right: 6px solid transparent;
  left: 50%;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  border-top: 6px solid;
  border-top-color: inherit;
  bottom: -5px;
}

.c1 {
  cursor: default;
  position: relative;
  white-space: nowrap;
}

.c1 .c2 {
  width: initial;
}

.c4 .rc-slider-handle {
  background-color: #1355d0;
}

.c4 .rc-slider-rail {
  background-color: #e5edfc;
}

.c4 .rc-slider-track {
  background-color: rgba(19,85,208,0.5);
}

.c4 .rc-slider-handle:active,
.c4 .rc-slider-handle:focus {
  border: none;
  box-shadow: 0 2px 6px 0 rgba(19,85,208,0.5);
}

.c4.rc-slider-disabled {
  background: none;
}

.c4.rc-slider-disabled .rc-slider-handle {
  background-color: #999999;
}

.c4.rc-slider-disabled .rc-slider-rail {
  background-color: #f2f2f2;
}

.c4.rc-slider-disabled .rc-slider-track {
  background-color: #cccccc;
}

.c0 {
  width: 100%;
}

.c0 > div:first-child {
  top: -41px;
  left: 20%;
}

<Slider
  max={100}
  min={0}
  onChange={[Function]}
  tipFormatter={[Function]}
  value={
    Object {
      "from": 10,
      "to": 30,
    }
  }
>
  <Slider__StyledTooltip
    max={100}
    min={0}
    onChange={[Function]}
    text="10 a 30"
    tipFormatter={[Function]}
    value={
      Object {
        "from": 10,
        "to": 30,
      }
    }
    visible={null}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Slider__StyledTooltip-sc-1xvfbkj-2",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "width:100%;> div:first-child{top:-41px;left:",
              [Function],
              "%;}",
            ],
          },
          "displayName": "Slider__StyledTooltip",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Slider__StyledTooltip-sc-1xvfbkj-2",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      max={100}
      min={0}
      onChange={[Function]}
      text="10 a 30"
      tipFormatter={[Function]}
      value={
        Object {
          "from": 10,
          "to": 30,
        }
      }
      visible={null}
    >
      <Tooltip
        className="c0"
        max={100}
        min={0}
        onChange={[Function]}
        placement="top"
        text="10 a 30"
        tipFormatter={[Function]}
        value={
          Object {
            "from": 10,
            "to": 30,
          }
        }
        visible={null}
      >
        <Tooltip__Wrapper
          className="c0"
          length={7}
          max={100}
          min={0}
          onChange={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          tipFormatter={[Function]}
          value={
            Object {
              "from": 10,
              "to": 30,
            }
          }
        >
          <StyledComponent
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Tooltip__Wrapper-sc-1s2fcfh-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "cursor:default;position:relative;white-space:",
                    [Function],
                    ";",
                    ".c2",
                    "{width:",
                    [Function],
                    ";}",
                  ],
                },
                "displayName": "Tooltip__Wrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Tooltip__Wrapper-sc-1s2fcfh-1",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            length={7}
            max={100}
            min={0}
            onChange={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            tipFormatter={[Function]}
            value={
              Object {
                "from": 10,
                "to": 30,
              }
            }
          >
            <div
              className="c0 c1"
              max={100}
              min={0}
              onChange={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              value={
                Object {
                  "from": 10,
                  "to": 30,
                }
              }
            >
              <Tip
                height={0}
                placement="top"
                show={false}
                width={0}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "c2",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          "background-color:",
                          "#4c4c4c",
                          ";border-color:",
                          "#4c4c4c",
                          ";border-radius:4px;color:",
                          "#FFFFFF",
                          ";font-size:16px;font-weight:bold;opacity:",
                          [Function],
                          ";padding:4px 8px;position:absolute;text-align:center;transition:opacity 0.2s ease-in-out,visibility 0.2s ease-in-out;visibility:",
                          [Function],
                          ";z-index:100;",
                          [Function],
                          " &:before{content:'';position:absolute;",
                          [Function],
                          ";}",
                        ],
                      },
                      "displayName": "Tip",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "c2",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  height={0}
                  placement="top"
                  show={false}
                  width={0}
                >
                  <div
                    className="c2 c3"
                    height={0}
                    width={0}
                  >
                    10 a 30
                  </div>
                </StyledComponent>
              </Tip>
              <rcRange
                allowCross={false}
                handleStyle={
                  Array [
                    Object {
                      "borderWidth": 0,
                      "height": 20,
                      "marginLeft": -9,
                      "marginTop": -6,
                      "width": 20,
                    },
                    Object {
                      "borderWidth": 0,
                      "height": 20,
                      "marginLeft": -9,
                      "marginTop": -6,
                      "width": 20,
                    },
                  ]
                }
                max={100}
                min={0}
                onAfterChange={[Function]}
                onBeforeChange={[Function]}
                onChange={[Function]}
                pushable={true}
                railStyle={
                  Object {
                    "height": 8,
                  }
                }
                tipFormatter={[Function]}
                trackStyle={
                  Array [
                    Object {
                      "height": 8,
                    },
                    Object {
                      "height": 8,
                    },
                  ]
                }
                value={
                  Array [
                    10,
                    30,
                  ]
                }
              >
                <StyledComponent
                  allowCross={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Slider__StyledRange-sc-1xvfbkj-1",
                        "isStatic": true,
                        "lastClassName": "c4",
                        "rules": Array [
                          ".rc-slider-handle{background-color:",
                          "#1355d0",
                          ";}.rc-slider-rail{background-color:",
                          "#e5edfc",
                          ";}.rc-slider-track{background-color:",
                          "rgba(19, 85, 208, 0.5)",
                          ";}.rc-slider-handle:active,.rc-slider-handle:focus{border:none;box-shadow:0 2px 6px 0 ",
                          "rgba(19, 85, 208, 0.5)",
                          ";}&.rc-slider-disabled{background:none;.rc-slider-handle{background-color:",
                          "#999999",
                          ";}.rc-slider-rail{background-color:",
                          "#f2f2f2",
                          ";}.rc-slider-track{background-color:",
                          "#cccccc",
                          ";}}",
                        ],
                      },
                      "displayName": "rcRange",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Slider__StyledRange-sc-1xvfbkj-1",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  handleStyle={
                    Array [
                      Object {
                        "borderWidth": 0,
                        "height": 20,
                        "marginLeft": -9,
                        "marginTop": -6,
                        "width": 20,
                      },
                      Object {
                        "borderWidth": 0,
                        "height": 20,
                        "marginLeft": -9,
                        "marginTop": -6,
                        "width": 20,
                      },
                    ]
                  }
                  max={100}
                  min={0}
                  onAfterChange={[Function]}
                  onBeforeChange={[Function]}
                  onChange={[Function]}
                  pushable={true}
                  railStyle={
                    Object {
                      "height": 8,
                    }
                  }
                  tipFormatter={[Function]}
                  trackStyle={
                    Array [
                      Object {
                        "height": 8,
                      },
                      Object {
                        "height": 8,
                      },
                    ]
                  }
                  value={
                    Array [
                      10,
                      30,
                    ]
                  }
                >
                  <ComponentEnhancer(Range)
                    activeDotStyle={Object {}}
                    allowCross={false}
                    className="c4"
                    count={1}
                    disabled={false}
                    dotStyle={Object {}}
                    dots={false}
                    handle={[Function]}
                    handleStyle={
                      Array [
                        Object {
                          "borderWidth": 0,
                          "height": 20,
                          "marginLeft": -9,
                          "marginTop": -6,
                          "width": 20,
                        },
                        Object {
                          "borderWidth": 0,
                          "height": 20,
                          "marginLeft": -9,
                          "marginTop": -6,
                          "width": 20,
                        },
                      ]
                    }
                    included={true}
                    marks={Object {}}
                    max={100}
                    min={0}
                    onAfterChange={[Function]}
                    onBeforeChange={[Function]}
                    onChange={[Function]}
                    prefixCls="rc-slider"
                    pushable={true}
                    railStyle={
                      Object {
                        "height": 8,
                      }
                    }
                    step={1}
                    tabIndex={Array []}
                    tipFormatter={[Function]}
                    trackStyle={
                      Array [
                        Object {
                          "height": 8,
                        },
                        Object {
                          "height": 8,
                        },
                      ]
                    }
                    value={
                      Array [
                        10,
                        30,
                      ]
                    }
                    vertical={false}
                  >
                    <div
                      className="rc-slider c4"
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseDown={[Function]}
                      onMouseUp={[Function]}
                      onTouchStart={[Function]}
                    >
                      <div
                        className="rc-slider-rail"
                        style={
                          Object {
                            "height": 8,
                          }
                        }
                      />
                      <Track
                        className="rc-slider-track rc-slider-track-1"
                        included={true}
                        key="1"
                        length={20}
                        offset={10}
                        style={
                          Object {
                            "height": 8,
                          }
                        }
                        vertical={false}
                      >
                        <div
                          className="rc-slider-track rc-slider-track-1"
                          style={
                            Object {
                              "height": 8,
                              "left": "10%",
                              "width": "20%",
                            }
                          }
                        />
                      </Track>
                      <Steps
                        activeDotStyle={Object {}}
                        dotStyle={Object {}}
                        dots={false}
                        included={true}
                        lowerBound={10}
                        marks={Object {}}
                        max={100}
                        min={0}
                        prefixCls="rc-slider"
                        step={1}
                        upperBound={30}
                        vertical={false}
                      >
                        <div
                          className="rc-slider-step"
                        />
                      </Steps>
                      <Handle
                        className="rc-slider-handle rc-slider-handle-1"
                        disabled={false}
                        key="0"
                        max={100}
                        min={0}
                        offset={10}
                        prefixCls="rc-slider"
                        style={
                          Object {
                            "borderWidth": 0,
                            "height": 20,
                            "marginLeft": -9,
                            "marginTop": -6,
                            "width": 20,
                          }
                        }
                        tabIndex={0}
                        value={10}
                        vertical={false}
                      >
                        <div
                          aria-disabled={false}
                          aria-valuemax={100}
                          aria-valuemin={0}
                          aria-valuenow={10}
                          className="rc-slider-handle rc-slider-handle-1"
                          onBlur={[Function]}
                          onKeyDown={[Function]}
                          role="slider"
                          style={
                            Object {
                              "borderWidth": 0,
                              "height": 20,
                              "left": "10%",
                              "marginLeft": -9,
                              "marginTop": -6,
                              "width": 20,
                            }
                          }
                          tabIndex={0}
                        />
                      </Handle>
                      <Handle
                        className="rc-slider-handle rc-slider-handle-2"
                        disabled={false}
                        key="1"
                        max={100}
                        min={0}
                        offset={30}
                        prefixCls="rc-slider"
                        style={
                          Object {
                            "borderWidth": 0,
                            "height": 20,
                            "marginLeft": -9,
                            "marginTop": -6,
                            "width": 20,
                          }
                        }
                        tabIndex={0}
                        value={30}
                        vertical={false}
                      >
                        <div
                          aria-disabled={false}
                          aria-valuemax={100}
                          aria-valuemin={0}
                          aria-valuenow={30}
                          className="rc-slider-handle rc-slider-handle-2"
                          onBlur={[Function]}
                          onKeyDown={[Function]}
                          role="slider"
                          style={
                            Object {
                              "borderWidth": 0,
                              "height": 20,
                              "left": "30%",
                              "marginLeft": -9,
                              "marginTop": -6,
                              "width": 20,
                            }
                          }
                          tabIndex={0}
                        />
                      </Handle>
                      <Marks
                        className="rc-slider-mark"
                        included={true}
                        lowerBound={10}
                        marks={Object {}}
                        max={100}
                        min={0}
                        onClickLabel={[Function]}
                        upperBound={30}
                        vertical={false}
                      >
                        <div
                          className="rc-slider-mark"
                        />
                      </Marks>
                    </div>
                  </ComponentEnhancer(Range)>
                </StyledComponent>
              </rcRange>
            </div>
          </StyledComponent>
        </Tooltip__Wrapper>
      </Tooltip>
    </StyledComponent>
  </Slider__StyledTooltip>
</Slider>
`;
