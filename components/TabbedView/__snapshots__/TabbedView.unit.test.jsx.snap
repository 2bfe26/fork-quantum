// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TabbedView />  Snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TabbedView
    skin="default"
  >
    <Tab
      title="example"
    >
      <p>
        Example text
      </p>
    </Tab>
  </TabbedView>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <ForwardRef
            active={true}
            onClick={[Function]}
            skin="default"
          >
            example
          </ForwardRef>
        </ForwardRef>,
        Array [
          <RenderIf
            conditional={true}
          >
            <p>
              Example text
            </p>
          </RenderIf>,
        ],
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              active={true}
              onClick={[Function]}
              skin="default"
            >
              example
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "example/.0",
            "nodeType": "function",
            "props": Object {
              "active": true,
              "children": "example",
              "onClick": [Function],
              "skin": "default",
            },
            "ref": null,
            "rendered": "example",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "TabbedView__NavItem-sc-131sgnr-1",
                "isStatic": false,
                "rules": Array [
                  "box-sizing:border-box;cursor:pointer;flex-shrink:0;font-size:20px;height:48px;line-height:1.5;min-width:90px;overflow:hidden;padding:9px 16px;position:relative;text-align:center;text-transform:uppercase;",
                  [Function],
                ],
              },
              "displayName": "NavItem",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "TabbedView__NavItem-sc-131sgnr-1",
              "target": "li",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "TabbedView__Navbar-sc-131sgnr-0",
            "isStatic": true,
            "rules": Array [
              "display:flex;flex-grow:1;flex-shrink:1;list-style:none;margin:0 0 25px 0;padding:0;",
            ],
          },
          "displayName": "Navbar",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "TabbedView__Navbar-sc-131sgnr-0",
          "target": "ul",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": ".0",
        "nodeType": "function",
        "props": Object {
          "children": <p>
            Example text
          </p>,
          "conditional": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Example text",
          },
          "ref": null,
          "rendered": "Example text",
          "type": "p",
        },
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <ForwardRef
              active={true}
              onClick={[Function]}
              skin="default"
            >
              example
            </ForwardRef>
          </ForwardRef>,
          Array [
            <RenderIf
              conditional={true}
            >
              <p>
                Example text
              </p>
            </RenderIf>,
          ],
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                active={true}
                onClick={[Function]}
                skin="default"
              >
                example
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "example/.0",
              "nodeType": "function",
              "props": Object {
                "active": true,
                "children": "example",
                "onClick": [Function],
                "skin": "default",
              },
              "ref": null,
              "rendered": "example",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "TabbedView__NavItem-sc-131sgnr-1",
                  "isStatic": false,
                  "rules": Array [
                    "box-sizing:border-box;cursor:pointer;flex-shrink:0;font-size:20px;height:48px;line-height:1.5;min-width:90px;overflow:hidden;padding:9px 16px;position:relative;text-align:center;text-transform:uppercase;",
                    [Function],
                  ],
                },
                "displayName": "NavItem",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "TabbedView__NavItem-sc-131sgnr-1",
                "target": "li",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "TabbedView__Navbar-sc-131sgnr-0",
              "isStatic": true,
              "rules": Array [
                "display:flex;flex-grow:1;flex-shrink:1;list-style:none;margin:0 0 25px 0;padding:0;",
              ],
            },
            "displayName": "Navbar",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "TabbedView__Navbar-sc-131sgnr-0",
            "target": "ul",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": ".0",
          "nodeType": "function",
          "props": Object {
            "children": <p>
              Example text
            </p>,
            "conditional": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Example text",
            },
            "ref": null,
            "rendered": "Example text",
            "type": "p",
          },
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
